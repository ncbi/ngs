############################################################################
#
#              Another Programmer's Editor Makefile Template
#
# This is a template Makefile for a simple program or library.
# It is meant to serve as a starting point for creating a portable
# Makefile, suitable for use under ports systems like *BSD ports,
# MacPorts, Gentoo Portage, etc.
#
# The goal is a Makefile that can be used without modifications
# on any Unix-compatible system.
#
# Variables that are conditionally assigned (with ?=) can be overridden
# via the command line as follows:
#
#       make VAR=value
#
# For example, MacPorts installs to /opt/local instead of the default
# /usr/local, and hence might use the following:
# 
#       make PREFIX=/opt/local
#
# Different systems may also use different compilers and keep libraries in
# different locations:
#
#       make CC=gcc CFLAGS=-O2 LDFLAGS="-L/usr/X11R6 -lX11"
#
# Variables can also inheret values from parent Makefiles (as in *BSD ports).
#
# Lastly, they can be overridden by the environment, e.g.
# 
#       setenv CFLAGS "-O -Wall -pipe"
#       make
#
# All these override methods allow the Makefile to respect the environment
# in which it is used.
#
# You can append values to variables within this Makefile (with +=).
# However, this should not be used to add compiler-specific flags like
# -Wall, as this would disrespect the environment.
############################################################################

############################################################################
# Installed targets

LIB     = libngs-adapt-c++.a
HEADERS = mylib.h
MAN     = mylib.3

############################################################################
# List object files that comprise BIN.

OBJS    = \
	ReadCollectionItf.o    \
	PileupItf.o            \
	PileupEventItf.o       \
	ReferenceItf.o         \
	ReferenceSequenceItf.o \
	AlignmentItf.o         \
	ReadGroupItf.o         \
	ReadItf.o              \
	FragmentItf.o          \
	StatisticsItf.o        \
	StringItf.o            \
	Refcount.o             \
	ErrorMsg.o             \
	ErrBlock.o

############################################################################
# Compile, link, and install options

# Where to find local libraries and headers.  For MacPorts, override
# with LOCALBASE=/opt/local.
LOCALBASE   ?= /usr/local

# Install in /usr/local, unless defined by the parent Makefile, the
# environment, or a command line option such as PREFIX=/opt/local.
PREFIX      ?= ${LOCALBASE}
MANPREFIX   ?= ${PREFIX}

############################################################################
# Build flags
# Override with "make CC=gcc", "make CC=icc", etc.
# Do not add non-portable options (such as -Wall) using +=
# Make sure all compilers are part of the same toolchain.  Do not mix
# compilers from different vendors or different compiler versions unless
# you know what you're doing.

# Defaults that should work with GCC and Clang.
CXX         ?= c++
CXXFLAGS    ?= -Wall -g -O

AR          ?= ar
RANLIB      ?= ranlib

OS          ?= unix
ARCH        != uname -p

INCLUDES    += -I${LOCALBASE}/include -I.. -I../ngs/${OS}/${ARCH}
CXXFLAGS    += ${INCLUDES}

############################################################################
# Assume first command in PATH.  Override with full pathnames if necessary.
# E.g. "make INSTALL=/usr/local/bin/ginstall"
# Do not place flags here (e.g. RM = rm -f).  Just provide the command
# and let flags be specified separately.

# No full pathnames for these.  Allow PATH to dtermine which one is used
# in case a locally installed version is preferred.
PRINTF  ?= printf
INSTALL ?= install

RM      ?= rm

############################################################################
# Standard targets required by package managers

all:    ${LIB}

${LIB}: ${OBJS}
	${AR} r ${LIB} ${OBJS}
	${RANLIB} ${LIB}

############################################################################
# Include dependencies generated by "make depend", if they exist.
# These rules explicitly list dependencies for each object file.
# See "depend" target below.  If Makefile.depend does not exist, use
# generic source compile rules.  These have some limitations, so you
# may prefer to create explicit rules for each target file.  This can
# be done automatically using "cpp -M" or "cpp -MM".  Run "man cpp"
# for more information, or see the "depend" target below.

# Rules generated by "make depend"
# If Makefile.depend does not exist, "touch" it before running "make depend"
include Makefile.depend

############################################################################
# Self-generate dependencies the old-fashioned way

depend:
	${RM} -f Makefile.depend
	for file in *.cpp; do \
	    ${CXX} ${INCLUDES} -MM $${file} >> Makefile.depend; \
	    ${PRINTF} "\t\$${CXX} -c \$${CXXFLAGS} $${file}\n\n" >> Makefile.depend; \
	done

############################################################################
# Remove generated files (objs and nroff output from man pages)

clean:
	${RM} -f ${OBJS} ${LIB} *.nr

# Keep backup files during normal clean, but provide an option to remove them
realclean: clean
	${RM} -f .*.bak *.bak *.BAK *.gmon core *.core

